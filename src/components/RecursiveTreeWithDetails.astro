---
import type { TreeNode } from '../utils.ts';

const node: TreeNode = Astro.props.node;
const basePath: string = Astro.props.basePath || '';
---

{Object.entries(node).map(([key, value]) => {
  const newPath = `${basePath}/${key}`;

  if (typeof value === 'string') {
    return (
      <li>
        <a href={value}>{key}</a>
      </li>
    );
  } else {
    const childNodes = Object.entries(value);

    return (
      <li>
        <details open>
          <summary class="flex items-center cursor-pointer">
            {key}
            <span class="ml-4">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 5l7 7-7 7"></path>
              </svg>
            </span>
          </summary>
          {childNodes.some(([_, childValue]) => typeof childValue === 'string') ? (
            <ul>
              <Astro.self node={value} basePath={newPath} />
            </ul>
          ) : (
            <Astro.self node={value} basePath={newPath} />
          )}
        </details>
      </li>
    );
  }
})}


<style>
li {
  list-style: none;
}

details > summary {
  list-style: none;
  font-weight: bold;
}

details > summary::marker,
details > summary::-webkit-details-marker {
  display: none;
}

summary {
  cursor: pointer;
}

details[open] > summary svg {
  transform: rotate(90deg);
}

details > summary,
details > ul {
    padding-inline-start: 0px;
}

details details > summary,
details details > ul {
  padding-inline-start: 10px;
}

details details details > summary,
details details details > ul {
  padding-inline-start: 20px;
}
</style>
